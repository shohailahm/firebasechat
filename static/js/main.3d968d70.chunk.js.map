{"version":3,"sources":["components/AvatarComponent.js","App.js","fbConfig.js","serviceWorker.js","index.js"],"names":["Arr","useStyles","makeStyles","theme","root","display","justifyContent","alignItems","minHeight","margin","spacing","orange","color","palette","getContrastText","deepOrange","backgroundColor","purple","deepPurple","AvatarComponent","onselect","classes","className","map","item","ind","text","i","fn","Avatar","key","onClick","renderAvtar","avtObj","avatar1","avatar2","avatar3","avatar4","avatar5","App","props","onSubmit","event","charCode","state","trim","writeMessageToDB","setState","checkAvatar","firebase","database","ref","on","snapshot","snp","val","published","type","loading","message","child","push","getMessages","limitToLast","newMessages","forEach","id","messages","bottomSpan","scrollIntoView","behavior","renderMessages","ListItem","ListItemText","style","wordBreak","primary","selectAvatar","obj","set","publisher","leave","handleLeavePage","e","returnValue","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","window","addEventListener","this","removeEventListener","marginTop","CircularProgress","Typography","variant","component","List","TextField","autoFocus","multiline","rowsMax","placeholder","onChange","target","value","onKeyPress","width","overflow","el","Component","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"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","file":"static/js/main.3d968d70.chunk.js","sourcesContent":["import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Avatar from '@material-ui/core/Avatar';\nimport { deepOrange, deepPurple } from '@material-ui/core/colors';\nconst Arr=['1', '2','3','4','5'];\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      display: 'flex',\n      justifyContent:'center',\n      alignItems:'center',\n      minHeight:'100vh',\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    orange: {\n      color: theme.palette.getContrastText(deepOrange[500]),\n      backgroundColor: deepOrange[500],\n    },\n    purple: {\n      color: theme.palette.getContrastText(deepPurple[500]),\n      backgroundColor: deepPurple[500],\n      '&:hover':{\n          backgroundColor:'gray'\n      }\n    },\n  }));\n\n  const renderAvtar=(classes,text,i,fn)=>{\n      return(\n      <Avatar className={classes.purple} key={i} onClick={()=>fn(i)}>{text}</Avatar>\n      )\n  };\n\nfunction AvatarComponent({onselect}){\n    const classes = useStyles();\n    return(\n        <div className={classes.root}>\n            Select An Avtar\n            {\n                Arr.map((item,ind)=>(\n                    renderAvtar(classes,item,ind,onselect)\n                ))\n            }\n      \n      </div>\n    )\n}\n\nexport default AvatarComponent;","import React, { Component } from \"react\"\nimport { TextField, List, ListItem, ListItemText, Typography } from \"@material-ui/core\"\nimport firebase from \"firebase\"\nimport \"./App.css\"\nimport { intiFire } from \"./fbConfig\"\nimport AvatarComponent from \"./components/AvatarComponent\"\nimport CircularProgress from '@material-ui/core/CircularProgress';\n\nconst avtObj={\n  avatar1:false,\n  avatar2:false,\n  avatar3:false,\n  avatar4:false,\n  avatar5:false\n}\nclass App extends Component {\n  constructor(props) {\n    super(props)\n    this.state = { text: \"\", messages: [],publisher:false,published:true,type:null,loading:true }\n    intiFire();\n  }\n  componentDidMount() {\n    window.addEventListener('beforeunload', this.handleLeavePage);\n     this.checkAvatar();\n    this.getMessages()\n  }\n\n  onSubmit = event => {\n    if (event.charCode === 13 && this.state.text.trim() !== \"\") {\n      this.writeMessageToDB(this.state.text)\n      this.setState({ text: \"\" })\n    }\n  }\n  \n  checkAvatar=()=>{\n    var avatar = firebase\n    .database()\n    .ref(\"chatroom/avatar/\")\n    // .child(\"avatar\")\n    \n    avatar.on(\"value\",snapshot=>{\n      let snp=snapshot.val();\n      for(let i in snp){\n         if(snp[i]===true){\n          return this.setState({published:true,type:i,loading:false});\n         }\n        \n         \n      }\n      return this.setState({published:false,type:null,loading:false});\n    })\n  \n  }\n  writeMessageToDB = message => {\n    firebase\n      .database()\n      .ref('chatroom/')\n      .child(\"messages\")\n      .push({\n        text: `${this.state.type} : ${message}`\n      })\n  }\n\n  getMessages = () => {\n    var messagesDB = firebase\n      .database()\n      .ref(\"chatroom/messages/\")\n      .limitToLast(500)\n    messagesDB.on(\"value\", snapshot => {\n      let newMessages = []\n      snapshot.forEach(child => {\n        var message = child.val()\n        newMessages.push({ id: child.key, text: message.text })\n      })\n      this.setState({ messages: newMessages })\n      this.bottomSpan.scrollIntoView({ behavior: \"smooth\" })\n    })\n  }\n\n  renderMessages = () => {\n    return this.state.messages.map(message => (\n      <ListItem>\n        <ListItemText\n          style={{ wordBreak: \"break-word\" }}\n          primary={message.text}\n        />\n      </ListItem>\n    ))\n  }\n\n  selectAvatar=(i)=>{\n    \n   let obj={...avtObj};\n   obj[`avatar${i+1}`]=true;\n   firebase\n   .database()\n   .ref(\"chatroom\")\n   .child(\"avatar\")\n   .set(obj);\n   this.setState({publisher:true,published:true})\n  }\n   \n  leave=()=>{\n    let obj={...avtObj};\n    firebase\n    .database()\n    .ref(\"chatroom\")\n    .child(\"avatar\")\n    .set(obj);\n  }\n\n  handleLeavePage=(e)=>{\n    this.leave();\n    const confirmationMessage = 'Some message';\n    e.returnValue = confirmationMessage;     // Gecko, Trident, Chrome 34+\n    return confirmationMessage;\n  }\n\n  //unsubscribing to event listerns\n  componentWillUnmount(){\n     this.leave()\n    window.removeEventListener('beforeunload', this.handleLeavePage);\n\n\n  }\n \n  render() {\n    //loader\n    if(this.state.loading){\n      return (<div className=\"App\" style={{marginTop:16}}>\n                 <CircularProgress color=\"secondary\" />\n             </div>)\n    }\n\n    //avatar selection if publisher isnt selcted\n\n    if(!this.state.published){\n     return (<><AvatarComponent onselect={this.selectAvatar}/> <span ref={el => (this.bottomSpan = el)} />\n     </>);\n    }\n\n    return (\n      <div className=\"App\">\n        <Typography variant=\"h2\" component=\"h3\">\n           Chatroom\n        </Typography>\n        <List>{this.renderMessages()}</List>\n        <TextField\n          autoFocus={true}\n          multiline={true}\n          rowsMax={3}\n          placeholder=\"Type something..\"\n          onChange={event => this.setState({ text: event.target.value })}\n          value={this.state.text}\n          onKeyPress={this.state.publisher?this.onSubmit:null}\n          style={{ width: \"90vw\", overflow: \"hidden\" }}\n        />\n        {this.state.publisher && <span onClick={this.leave}>Leave</span>}\n        <span ref={el => (this.bottomSpan = el)} />\n      </div>\n    )\n  }\n}\n\n\n\nexport default App;\n","import firebase from 'firebase';\nexport const intiFire=()=>{\n    var firebaseConfig = {\n        apiKey: \"AIzaSyA-kz-UcFun8iP7_DChv2mH9N3tGR-4mf8\",\n        authDomain: \"chatapp-89dbc.firebaseapp.com\",\n        databaseURL: \"https://chatapp-89dbc.firebaseio.com\",\n        projectId: \"chatapp-89dbc\",\n        storageBucket: \"chatapp-89dbc.appspot.com\",\n        messagingSenderId: \"1043787722111\",\n        appId: \"1:1043787722111:web:3d75a3723d99e0dc0f7e4a\"\n      };\n      // Initialize Firebase\n    return  firebase.initializeApp(firebaseConfig);\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}